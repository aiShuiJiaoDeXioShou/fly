package main

import (
	"encoding/json"
	"flye/comm/mylog"
	"flye/comm/reptile/qidian"
	"flye/dao"
	"flye/entity"
	"fmt"
	"github.com/gocolly/colly"
	"github.com/gocolly/colly/debug"
	"log"
	"net/http"
	"os"
	"strconv"
	"testing"
)

// 测试数据库是否连接成功
func Test1(t *testing.T) {
	// 连接成功的话，添加一条数据
	err := dao.DB.Save(&entity.Category{
		Name:     "",
		Children: 0,
		Describe: "第一次跑团人物卡",
		Type:     0,
	}).Error

	if err != nil {
		panic(err)
		return
	}

	// 查找指定字段
	var categorys []entity.Category
	err = dao.DB.Find(&categorys).Error
	if err != nil {
		panic(err)
		return
	}
	// 如果找到该数据，就打印到控制台上面
	for _, c := range categorys {
		log.Println(c)
	}
	// 逻辑删除该条数据
	err = dao.DB.Where("id in (?)", []uint{1, 2, 3, 4}).Delete(&entity.Category{}).Error
}

// 日记测试
func Test2(t *testing.T) {
	//mylog.Wrong("这是一个错误信息", "测试")
	// 严重错误直接退出程序

	mylog.Err("这是一个严重错误信息", "测试")
	var a = 1
	var b = 2
	log.Println(a + b)
}

// 爬取简书
func PaJianShu() {
	c := colly.NewCollector(colly.UserAgent("Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36"), colly.MaxDepth(1), colly.Debugger(&debug.LogDebugger{}))
	//文章列表
	c.OnHTML("ul[class='note-list']", func(e *colly.HTMLElement) {
		//列表中每一项
		e.ForEach("li", func(i int, item *colly.HTMLElement) {
			//文章链接
			href := item.ChildAttr("div[class='content'] > a[class='title']", "href")
			//文章标题
			title := item.ChildText("div[class='content'] > a[class='title']")
			//文章摘要
			summary := item.ChildText("div[class='content'] > p[class='abstract']")
			fmt.Println(title, href)
			fmt.Println(summary)
			fmt.Println()
		})
	})

	err := c.Visit("https://www.jianshu.com")
	if err != nil {
		fmt.Println(err.Error())
	}
}

// 起点中文网Cookice的值
type AutoGenerated struct {
	Name     string      `json:"name"`
	Value    string      `json:"value"`
	Expires  int         `json:"expirationDate,omitempty"`
	Domain   string      `json:"domain"`
	Path     string      `json:"path"`
	HostOnly bool        `json:"hostOnly"`
	HTTPOnly bool        `json:"httpOnly"`
	SameSite interface{} `json:"sameSite"`
	Secure   bool        `json:"secure"`
	Session  bool        `json:"session"`
	StoreID  interface{} `json:"storeId"`
}

// 起点中文网月票结构体
type QidianMonthTicket struct {
	// 排名
	SequenceID int `json:"sequenceId"`
	// 小说名称
	NovelName string `json:"novelName"`
	// 月票数量
	MonthTicket int `json:"monthTicket"`
	// 小说链接
	NovelLink string `json:"novelLink"`
}

func 设置爬虫Cookice的值(c *colly.Collector) {
	// 设置爬虫cookies数据
	// 读取static下的QiDianCookies.json文件
	file, err2 := os.ReadFile("static/QiDianCookies.json")
	if err2 != nil {
		panic(err2)
	}
	// 将json数据转换成map
	var cookies []AutoGenerated
	err2 = json.Unmarshal(file, &cookies)
	if err2 != nil {
		panic(err2)
	}

	// 将cookies的数据转化为[]*http.Cookie{}
	var cookies2 []*http.Cookie
	for _, c := range cookies {
		cookies2 = append(cookies2, &http.Cookie{
			Name:   c.Name,
			Value:  c.Value,
			Domain: c.Domain,
			Path:   c.Path,
			Secure: c.Secure,
		})
	}
	err := c.SetCookies("https://www.qidian.com", cookies2)
	if err != nil {
		log.Println(err.Error())
	}
}

// 写一个爬取起点月票板的爬虫
func 起点中文网爬虫(root string) {

	// 这里是爬虫的参数
	userAgent := colly.UserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.53 Safari/537.36 Edg/103.0.1264.37")
	c := colly.NewCollector(userAgent)
	// 设置爬虫的请求头

	// 设置爬取规则
	月票榜的根目录 := root

	// 解析月票榜
	c.OnHTML(月票榜的根目录, func(e *colly.HTMLElement) {

		e.ForEach("li[data-rid]", func(i int, item *colly.HTMLElement) {
			var qidian QidianMonthTicket
			item.ForEach("div", func(i int, item *colly.HTMLElement) {
				解析内层html(i, item, &qidian)
			})
		})

	})

	err := c.Visit("https://www.qidian.com/rank/")
	if err != nil {
		log.Println(err.Error())
	}
}

var qidians []QidianMonthTicket

func 解析内层html(i int, item *colly.HTMLElement, qidian *QidianMonthTicket) {

	if i == 0 {
		// 小说排行
		novelName := item.Text
		// 将novelName强转为int类型
		novelNameInt, _ := strconv.Atoi(novelName)
		qidian.SequenceID = novelNameInt

	} else if i == 1 {
		href := item.ChildAttr("a", "href")
		qidian.NovelLink = href
		name := item.ChildText("a")
		qidian.NovelName = name
		total := item.ChildText("i[class=total]")
		totalInt, _ := strconv.Atoi(total)
		qidian.MonthTicket = totalInt

		// 将该条数据添加到数组中
		qidians = append(qidians, *qidian)
	}
}

// 测试colly
func Test3(t *testing.T) {
	起点中文网爬虫("body > div.wrap > div.rank-box.box-center.cf > div.main-content-wrap.fl > div.rank-body > div > div:nth-child(2) > div > ul")
	for _, item := range qidians {
		fmt.Println(item)
	}
}

// 测试起点爬虫
func Test4(t *testing.T) {
	root := qidian.NOVEL_RANKING
	r := qidian.NewQiDianRankingReptile(root)
	rankings := r.GetRanking()
	for _, item := range *rankings {
		fmt.Println(item)
	}

}
